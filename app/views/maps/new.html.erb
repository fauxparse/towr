<div id="editor">
  <%= field @map %>
</div>

<% content_for :scripts do %>
  <script type="text/javascript" charset="utf-8">
    var NORTH = 1, EAST = 2, SOUTH = 4, WEST = 8;
  
    var Editor = new Class({
      initialize: function(element) {
        var self = this;
        this.element = element;
        this.field = element.getElements('.field')[0];
        this.canvas = new Element('canvas')
          .inject(this.field)
          .addEvent('draw', function() {
            self.draw();
          });
        this.cellSize = this.field.getElements('.cell')[0].getSize().x;
        this.resizeTo(this.field.getChildren('.row').length, this.field.getChildren('.row')[0].getChildren('.cell').length);
        this.element.setStyles({ width: (this.columns * this.cellSize) + 'px' });
        this.resizeHandle = new Element('div', { 'class':'resize' })
          .inject(this.element);
        this.element.makeResizable({
          grid: 32,
          handle: this.resizeHandle,
          limit: { x:[this.cellSize * 5, this.cellSize * 32], y:[this.cellSize * 5, this.cellSize * 32] },
          onDrag: function(element, event) {
            var size = element.getSize();
            self.resizeTo(Math.floor(size.y / self.cellSize), Math.floor(size.x / self.cellSize));
          }
        });
        
        this.undoStack = [];
        this.redoStack = [];
        this.drawing = false;
        this.field.addEvent('mousedown:relay(.cell)', function(event, cell) {
          var cp = cell.getPosition(),
              q = self._cellQuadrant(event.client.x - cp.x, event.client.y - cp.y);

          if (q) {
            var x = cell.x * 2 + ((q == NORTH || q == SOUTH) ? 1 : 0) + (q == EAST ? 2 : 0),
                y = cell.y * 2 + ((q == WEST || q == EAST) ? 1 : 0) + (q == SOUTH ? 2 : 0);
            self.startDrawing([x, y]);
          }
        }).addEvent('mousemove:relay(.cell)', function(event, cell) {
          if (self.drawing) {
            var cp = cell.getPosition(),
                q = self._cellQuadrant(event.client.x - cp.x, event.client.y - cp.y);

            if (q) {
              var x = cell.x * 2 + ((q == NORTH || q == SOUTH) ? 1 : 0) + (q == EAST ? 2 : 0),
                  y = cell.y * 2 + ((q == WEST || q == EAST) ? 1 : 0) + (q == SOUTH ? 2 : 0),
                  p = [ x, y ],
                  l = self.drawing.getLast();
              if (p[0] != l[0] || p[1] != l[1]) {
                self.drawing.push(p);
                
                var first = self.drawing.shift();
                var second = self.drawing[0];
                var x1 = first[0], y1 = first[1], x2 = second[0], y2 = second[1];
                var dx = Math.abs(x2 - x1), dy = Math.abs(y2 - y1);
                if ((dx <= 2 && dy <= 2) && !(((x1 == x2) && (y1 % 2)) || ((y1 == y2) && (x1 % 2)))) {
                  var cx = Math.floor((x1 + x2) / 4), cy = Math.floor((y1 + y2) / 4);
                  var cx1 = x1 - (cx * 2), cy1 = y1 - (cy * 2),
                      cx2 = x2 - (cx * 2), cy2 = y2 - (cy * 2);
                  var p1 = cx1 == 1 ? (cy1 ? SOUTH : NORTH) : (cx1 ? EAST : WEST);
                  var p2 = cx2 == 1 ? (cy2 ? SOUTH : NORTH) : (cx2 ? EAST : WEST);

                  self.field.getElements('.row:nth-child(' + (cy + 1) + ')')[0].getElements('.cell:nth-child(' + (cx + 1) + ')')
                    .addClass('route-' + (p1 + p2));
                  self.draw();
                } else {
                  self.drawing.shift();
                  self.drawing.unshift(first);
                }
              }
            }
          }
        }).addEvent('mouseup:relay(.cell)', function(event, cell) {
          if (self.drawing) {
            self.stopDrawing();
          }
        })
        .addEvent('mouseLeave', function() {
          if (self.drawing) {
            self.stopDrawing();
          }
        });
      },
      startDrawing: function() {
        this.drawing = $A(arguments);
      },
      stopDrawing: function() {
        this.drawing = false;
      },
      resizeTo: function(rows, columns) {
        var self = this;
        this.rows = rows;
        this.columns = columns;
        
        for (i = self.field.getElements('.row').length; i < self.rows; i++) {
          new Element('div', { 'class':'row' }).inject(self.field);
        }
        var re = self.field.getElements('.row');
        re.each(function(row, j) {
          var l = row.getElements('.cell').length;
          for (i = l; i < self.columns; i++) {
            new Element('div', { 'class':'cell' }).inject(row);
          }
          var ce = row.getElements('.cell');
          for (i = 0; i < ce.length; i++) {
            ce[i].x = i;
            ce[i].y = j;
            i < self.columns ? ce[i].show() : ce[i].hide();
          }
        });
        for (j = 0; j < re.length; j++) {
          j < self.rows ? re[j].show() : re[j].hide();
        }
        this.canvas.fireEvent('draw');
      },
      draw: function() {
        var self = this;
        var w = this.columns * this.cellSize, h = this.rows * this.cellSize;
        this.canvas.set('width', w).set('height', h);
        var context = this.canvas.getContext('2d');
        var re = this.field.getChildren('.row');
        context.lineWidth = 16;
        context.strokeStyle = "#ccc";
        
        for (j = 0; j < self.rows; j++) {
          var ce = re[j].getChildren('.cell');
          for (i = 0; i < self.columns; i++) {
            var cell = ce[i];
            var x = i * self.cellSize, y = j * self.cellSize;
            $A(cell.classList).each(function(c) {
              if (t = /route-(\d+)/.exec(c)) {
                switch (parseInt(t[1])) {
                  case 5:
                    context.moveTo(x + self.cellSize / 2, y);
                    context.lineTo(x + self.cellSize / 2, y + self.cellSize);
                    context.stroke();
                    break;
                  case 10:
                    context.moveTo(x, y + self.cellSize / 2);
                    context.lineTo(x + self.cellSize, y + self.cellSize / 2);
                    context.stroke();
                    break;
                  case 3:
                    context.moveTo(x + self.cellSize / 2, y);
                    context.arc(x + self.cellSize, y, self.cellSize / 2, Math.PI, Math.PI / 2, true);
                    context.stroke();
                    break;
                  case 6:
                    context.moveTo(x + self.cellSize, y + self.cellSize / 2);
                    context.arc(x + self.cellSize, y + self.cellSize, self.cellSize / 2, Math.PI * 1.5, Math.PI, true);
                    context.stroke();
                    break;
                  case 9:
                    context.moveTo(x, y + self.cellSize / 2);
                    context.arc(x, y, self.cellSize / 2, Math.PI / 2, 0, true);
                    context.stroke();
                    break;
                  case 12:
                    context.moveTo(x + self.cellSize / 2, y + self.cellSize);
                    context.arc(x, y + self.cellSize, self.cellSize / 2, 0, Math.PI * 1.5, true);
                    context.stroke();
                    break;
                }
              }
            });
          }
        }
      },
      _cellQuadrant: function(x, y) {
        var r = 1.2 * this.cellSize / 4;
        var dx = x - this.cellSize / 2, dl = x, dr = this.cellSize - x;
        var dy = y - this.cellSize / 2, dt = y, db = this.cellSize - y;
        if (Math.sqrt(dx * dx + dt * dt) < r) { return NORTH; }
        if (Math.sqrt(dx * dx + db * db) < r) { return SOUTH; }
        if (Math.sqrt(dy * dy + dl * dl) < r) { return WEST; }
        if (Math.sqrt(dy * dy + dr * dr) < r) { return EAST; }
        return false;
      }
    });
    
    window.addEvent('domready', function() {
      new Editor($('editor'));
    });
    
  </script>
<% end %>